package reactlu

import (
	"fmt"
	"html/template"
	"io/ioutil"
	"net/http"
	"sync"

	"jdy/pkg/api"
	"jdy/pkg/common"
	"jdy/pkg/lu"
	"jdy/pkg/util/must"
)

// DevAsset indicates the asset info to be reload everytime a page is requested.
var DevAsset = false

// RouteParams provides the parameters for NewRoutes.
type RouteParams struct {
	AssetName    string
	RootPath     string
	PageTemplate string
	// If null, public.
	PermissionRequired func(*api.User) bool

	mu       sync.Mutex
	asset    assetInfo
	template *template.Template
}

type assetInfo struct {
	Hash string `json:"hash"`
}

// LoadInfo loads the asset info generated by webpack.
func (p *RouteParams) LoadInfo() {
	p.mu.Lock()
	defer p.mu.Unlock()
	assetPath := "./dist/" + p.AssetName + "/asset.json"
	b, err := ioutil.ReadFile(assetPath)
	if err != nil {
		panic(fmt.Errorf("Failed to read asset config at %s (%v), have you build it?", assetPath, err))
	}
	common.UnmarshalJSONOrDie(b, &p.asset)

	p.template = template.Must(template.New("page").Parse(p.PageTemplate))
	return
}

// NewRoutes provies routes for serving a react app with client side
// routing.
func NewRoutes(params *RouteParams) []api.Route {
	inj := lu.NewInjectorWithOptions(false)
	if !DevAsset {
		params.LoadInfo()
	}
	inj.SetConst(params)

	return []api.Route{
		{
			Method:     "GET",
			PathPrefix: params.RootPath + "/dist",
			Handler: http.StripPrefix(
				"/dist/"+params.AssetName,
				http.FileServer(http.Dir("./dist/"+params.AssetName))),
		},
		{
			Method:     "GET",
			PathPrefix: params.RootPath,
			HandlerFunc: func() http.HandlerFunc {
				if params.PermissionRequired == nil {
					return lu.Public(inj, reactPage)
				}
				// return lu.PermissionRequired(inj, params.PermissionRequired, reactPage)
				return lu.Public(inj, reactPage)
			}(),
		},
	}
}

func reactPage(p *RouteParams) lu.Replyer {
	assetBase := "//cdn.applysquare.net"
	if DevAsset {
		p.LoadInfo()
		assetBase = ""
	}
	return func(res http.ResponseWriter) {
		res.Header().Set("Content-Type", "text/html; charset=UTF-8")
		res.WriteHeader(http.StatusOK)
		must.Must(p.template.Execute(res, PageParams{
			AssetURL: fmt.Sprint(assetBase, "/dist/", p.AssetName, "/", p.asset.Hash),
		}))
	}
}
